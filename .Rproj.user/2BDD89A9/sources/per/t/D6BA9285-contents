---
title: "Asymmetric alignment paper, Experiment 2 analysis and graphs"
author: "Kenny Smith"
date: "04/02/2019"
output: html_document
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE, warning=FALSE)

library(ggplot2)


my.colours <- c("#EA7D00","#006DE9","#808080")

set.seed(67601)

```

# Read in data and report Ns

```{r}
exp2.data <- read.csv("ProcessedData/Experiment2Data.csv")

#put Block in desired order
exp2.data$Block <- factor(exp2.data$Block,
                               levels=c("Training",
                                        "Recall 1",
                                        "Interaction Block 1",
                                        "Interaction Block 2",
                                        "Recall 2"))

#Required to avoid overlapping text in some plots
exp2.data$BlockNewlines <- plyr::revalue(exp2.data$Block,
                                   c("Interaction Block 1"="Interaction\nBlock 1",
                                      "Interaction Block 2"="Interaction\nBlock 2"))

#I want Pair as a factor
#Note: pairs 60-102 collected at Edinburgh, 151-190 collected at Warwick
exp2.data$Pair <- as.factor(exp2.data$Pair)

plyr::ddply(exp2.data,~Condition,plyr::summarise,Current_N=length(unique(Pair)))
```





# Brief report of communicative success

This is high throughout.

```{r}
exp2.by.pair.scores <- aggregate(Score~Condition+Block+Pair,data=subset(exp2.data,Block %in% c("Interaction Block 1", "Interaction Block 2")),FUN=sum)

aggregate(Score~Condition,data=exp2.by.pair.scores,FUN=mean)
aggregate(Score~Block+Condition,data=exp2.by.pair.scores,FUN=mean)
```


# Calculate and plot proportion of marked singulars by block

## Calculate proportions 

```{r}
#We only want to analyse singulars
exp2.data.singulars <- subset(exp2.data,Number==1)
exp2.data.by.block <- aggregate(data=exp2.data.singulars,
                                       Marked~Condition + Pair + Block + BlockNewlines + Participant + ParticipantID,
                                       FUN=mean)

exp2.data.by.block <- plyr::rename(exp2.data.by.block,c("Marked"="ProportionMarkedSingulars"))

#I want it as 100-66 then 100-33 for plots etc
exp2.data.by.block$Condition <- factor(exp2.data.by.block$Condition,levels=c("100-66","100-33"))

exp2.data.by.block$Condition <- plyr::revalue(exp2.data.by.block$Condition,
                                                 c("100-66"="Condition: 100-66",
                                                   "100-33"="Condition: 100-33"))

```

## Proportion plots

One graph for all raw data, another with one facet per pair, one with mean and 95% CIs.

```{r, fig.width=10}
#All data

ggplot(data=exp2.data.by.block, aes(x=BlockNewlines, y=ProportionMarkedSingulars, group=ParticipantID, colour=Pair,ymin=0,ymax=1)) +
  theme_bw() + 
  facet_wrap(~Condition, ncol=4) +
  geom_line() +
  ylab("Proportion Marked Singulars") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1"))
```

```{r, include=FALSE}
#All data, for paper

ggplot(data=exp2.data.by.block, aes(x=BlockNewlines, y=ProportionMarkedSingulars, group=ParticipantID, colour=Pair,ymin=0,ymax=1)) +
  theme_bw() + 
  facet_wrap(~Condition, ncol=4) +
  geom_line() +
  ylab("Proportion Marked Singulars") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  ggsave(file="Plots/Exp2NumMarkingByParticipant.pdf",width=8, height=3)
```

```{r}
#For the by-pair plot, need to add a DummyPair column so that the facets work out nicely - this is a little clumsy, but simplest way to do this seems to be to split by condition and convert Pair factor to integers
exp2.data.by.block.10066 <- subset(exp2.data.by.block,Condition=='Condition: 100-66')

exp2.data.by.block.10066$DummyPair <- droplevels(exp2.data.by.block.10066$Pair)

#change levels to integers
levels(exp2.data.by.block.10066$DummyPair) <- 1:length(levels(exp2.data.by.block.10066$DummyPair))

#ditto for other condition
exp2.data.by.block.10033 <- subset(exp2.data.by.block,Condition=='Condition: 100-33')

exp2.data.by.block.10033$DummyPair <- droplevels(exp2.data.by.block.10033$Pair)

#change levels to integers
levels(exp2.data.by.block.10033$DummyPair) <- 1:length(levels(exp2.data.by.block.10033$DummyPair))

#and recombine
exp2.data.by.block.dummyp <- rbind(exp2.data.by.block.10066,exp2.data.by.block.10033)
```

```{r fig.height=20, fig.width=12}
#By-pair plot
ggplot(data=exp2.data.by.block.dummyp, aes(x=BlockNewlines, y=ProportionMarkedSingulars, group=ParticipantID, colour=Pair,ymin=0,ymax=1)) +
  theme_bw() + 
  facet_grid(DummyPair ~ Condition) +
  geom_line() +
  ylab("Proportion Marked Singulars") + 
  theme(legend.position="none") + 
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  theme(strip.text.y = element_blank()) + 
  theme(axis.title.x = element_blank()) 
```

```{r include=FALSE}
#By-pair plot, for paper
ggplot(data=exp2.data.by.block.dummyp, aes(x=BlockNewlines, y=ProportionMarkedSingulars, group=ParticipantID, colour=Pair,ymin=0,ymax=1)) +
  theme_bw() + 
  facet_grid(DummyPair ~ Condition) +
  geom_line() +
  ylab("Proportion Marked Singulars") + 
  theme(legend.position="none") + 
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  theme(strip.text.y = element_blank()) + 
  theme(axis.title.x = element_blank()) +
  ggsave(file="Plots/Exp2NumMarkingByPair.pdf",width=8, height=10)
```

```{r}
#Means and CIs

ggplot(data=exp2.data.by.block, aes(x=Participant, y=ProportionMarkedSingulars, group=Participant, shape=Participant,fill=Participant)) +
  theme_bw() + 
  facet_grid(Condition~Block) +
  stat_summary(geom='bar', fun.y='mean', position='dodge',colour='black') +
  stat_summary(geom='errorbar',fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",colour="black",width=0.1) +
  stat_summary(geom='point', fun.y='mean', position='dodge',colour='black') +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  coord_cartesian(ylim=c(0,1)) +
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  ylab("Proportion Marked Singulars") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") 
```

```{r include=FALSE}
#Means and CIs, for paper

ggplot(data=exp2.data.by.block, aes(x=Participant, y=ProportionMarkedSingulars, group=Participant, shape=Participant,fill=Participant)) +
  theme_bw() + 
  facet_grid(Condition~Block) +
  stat_summary(geom='bar', fun.y='mean', position='dodge',colour='black') +
  stat_summary(geom='errorbar',fun.data='mean_cl_boot',fun.ymin="min", fun.ymax="max",colour="black",width=0.1) +
  stat_summary(geom='point', fun.y='mean', position='dodge',colour='black') +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  coord_cartesian(ylim=c(0,1)) +
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  ylab("Proportion Marked Singulars") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggsave(file="Plots/Exp2NumMarking.pdf",width=8, height=4)
```


# Plot change from block to block, run statistics on those changes

## Plots showing changes in marker usage from block to block

```{r}
#The most convenient way to calculate differences from block to block is to restructure the data to wide format.
#BlockNewlines causes irritation here, so selecting it out
exp2.change.data <- tidyr::spread(data=dplyr::select(exp2.data.by.block,-BlockNewlines),
                                  Block,ProportionMarkedSingulars)

exp2.change.data$ChangeTrainingRecall1 <- exp2.change.data$'Recall 1' - exp2.change.data$'Training'

exp2.change.data$ChangeRecall1Interaction2 <- exp2.change.data$'Interaction Block 2'-exp2.change.data$'Recall 1'

exp2.change.data$ChangeRecall1Recall2 <- exp2.change.data$'Recall 2'-exp2.change.data$'Recall 1'


#convert back to long format for plotting
exp2.change.data.for.plotting <- dplyr::select(exp2.change.data,-Training,-'Recall 1',-'Recall 2',-'Interaction Block 1',-'Interaction Block 2')

exp2.change.data.for.plotting <- tidyr::gather(exp2.change.data.for.plotting,
BlockToBlock,Change,ChangeTrainingRecall1,ChangeRecall1Interaction2,ChangeRecall1Recall2)

#Make column names more user-friendly
exp2.change.data.for.plotting$BlockToBlock <- plyr::revalue(exp2.change.data.for.plotting$BlockToBlock,
                                                   c("ChangeTrainingRecall1"="Training to Recall 1",
                                                     "ChangeRecall1Interaction2"="Recall 1 to Interaction Block 2",
                                                     "ChangeRecall1Recall2"="Recall 1 to Recall 2"))

# For one of the plots below I want to plot the two conditions seperately and combined - to do this I am going to duplicate the dataframe and add a "Both Conditions" column
exp2.change.data.for.plotting.Cscombined <- exp2.change.data.for.plotting
exp2.change.data.for.plotting.Cscombined$Condition <- "Both Conditions"
exp2.change.data.for.plotting.combined <- rbind(exp2.change.data.for.plotting,exp2.change.data.for.plotting.Cscombined)

# #To avoid overlapping text in the figures
# exp2.change.data.for.plotting.combined$Condition <-
#   plyr::revalue(exp2.change.data.for.plotting.combined$Condition,
#                 c("Condition: 100-66"="Condition:\n100-66",
#                 "Condition: 100-33"="Condition:\n100-33"))
```


Plot for Training to Recall 1, I am only plotting variably-trained P2s here; the statistics (see below) indicate a significant difference between conditions, so I am plotting those separately.

```{r}
ggplot(data=subset(exp2.change.data.for.plotting.combined,BlockToBlock=="Training to Recall 1" & Participant=="P2"), aes(x=Condition, y=Change, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Training to Recall 1 (P2s only)")
```

```{r include=FALSE}
#Plot for paper - annotations added
ggplot(data=subset(exp2.change.data.for.plotting.combined,BlockToBlock=="Training to Recall 1" & Participant=="P2"), aes(x=Condition, y=Change, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Training to Recall 1 (P2s only)") +
  annotate("text",x=1.5,y=1.09,label="***") + #add *** to indicate p<.001 between participants
  geom_segment(aes(x=1, y=1.1, xend=1.4, yend=1.1)) + geom_segment(aes(x=1.6, y=1.1, xend=2, yend=1.1)) + #add lines either side of **
  annotate("text",x=1,y=5/6,label="*") + #add note about n.s.difference from 0
  annotate("text",x=2,y=5/6,label="**") + #add note about n.s.difference from 0
  annotate("text",x=3,y=5/6,label="n.s.") + #add note about n.s.difference from 0
  ggsave(file="Plots/Exp2TrainingToRecall1Change.pdf",width=6, height=4)
```

Plot for Recall 1 to Interaction Block 2 - here we want to collapse across condition and plot P1 and P2 seperately, since the stats suggest no effect of condition but an effect of participant.

```{r}
ggplot(data=subset(exp2.change.data.for.plotting,BlockToBlock=="Recall 1 to Interaction Block 2"), aes(x=Participant, y=Change, fill=Participant)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Recall 1 To Interaction Block 2")
```

```{r include=FALSE}
#For paper - no y-axis text, annotations
ggplot(data=subset(exp2.change.data.for.plotting,BlockToBlock=="Recall 1 to Interaction Block 2"), aes(x=Participant, y=Change, fill=Participant)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  theme(axis.title.x = element_blank()) +
  theme(axis.title.y = element_blank()) +
  theme(axis.ticks = element_blank(), axis.text.y = element_blank()) + 
  theme(legend.position="none") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Recall 1 To Interaction Block 2") +
  annotate("text",x=1.5,y=1.09,label="***") + #add *** to indicate p<.001 between participants
  geom_segment(aes(x=1, y=1.1, xend=1.4, yend=1.1)) + geom_segment(aes(x=1.6, y=1.1, xend=2, yend=1.1)) + #add lines either side of **
  annotate("text",x=1,y=1/6,label="p=.058") + #add note about marginal.difference from 0
  annotate("text",x=1.8,y=2.3/3,label="***") + #add note about n.s.difference from 0
  ggsave(file="Plots/Exp2Recall1ToInteraction2Change.pdf",width=4, height=4)
```

Plot for Recall 1 to Recall 2. Again, we want to collapse across condition and plot P1 and P2 seperately 
```{r}
ggplot(data=subset(exp2.change.data.for.plotting,BlockToBlock=="Recall 1 to Recall 2"), aes(x=Participant, y=Change, fill=Participant)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Recall 1 To Recall 2")

```

```{r include=FALSE}
#Plot for figure, no y-axis text, annotations
ggplot(data=subset(exp2.change.data.for.plotting,BlockToBlock=="Recall 1 to Recall 2"), aes(x=Participant, y=Change, fill=Participant)) +
  theme_bw() + 
  geom_boxplot() +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(limits = c(-1,1.1),breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  theme(axis.title.y = element_blank()) +
  theme(axis.ticks = element_blank(), axis.text.y = element_blank()) + 
  ggtitle("Recall 1 To Recall 2") +
  annotate("text",x=1.5,y=1.09,label="*") + #add *** to indicate p<.001 between participants
  geom_segment(aes(x=1, y=1.1, xend=1.4, yend=1.1)) + geom_segment(aes(x=1.6, y=1.1, xend=2, yend=1.1)) + #add lines either side of *
  annotate("text",x=1,y=5.5/6,label="n.s.") + #add note about marginal.difference from 0
  annotate("text",x=2,y=5.5/6,label="*") + #add note about n.s.difference from 0
  ggsave(file="Plots/Exp2Recall1ToRecall2Change.pdf",width=4, height=4)

```

## Stats for probability matching (change from Training to Recall 1)

Since the categorical participants are all categorical at recall 1 (with the exception of a single participant who dropped a singular marker once), we are only analysing variably-trained participants - the analysis comes out the same if you include the categorical participants

Q1: do the conditions differ in change from Training to Recall 1?

Answer **Yes**. This looks like the same thing we got in Exp 1, with people being pulled towards 0% or 100%. 

```{r}
wilcox.test(subset(exp2.change.data,Condition=="Condition: 100-66" & Participant=="P2")$ChangeTrainingRecall1, 
            subset(exp2.change.data,Condition=="Condition: 100-33"& Participant=="P2")$ChangeTrainingRecall1) 
```

Q2: does the change from training  for the variably-trained participants differ from 0? Doing this as a combined analysis and also separted by condition, since the earlier test suggested a difference.

Answer is **no** for both conditions combined.

Answer is **yes** for the 100-66 condition - they change upwards. 

Answer is **yes** for the 100-33 condition - they change downwards.


```{r}
wilcox.test(subset(exp2.change.data,Participant=="P2")$ChangeTrainingRecall1)
wilcox.test(subset(exp2.change.data,Condition=="Condition: 100-66" & Participant=="P2")$ChangeTrainingRecall1)
wilcox.test(subset(exp2.change.data,Condition=="Condition: 100-33" & Participant=="P2")$ChangeTrainingRecall1) 
```


## Stats for change in use due to interaction (change from Recall 1 to Interaction 2)

Q1a: do the conditions differ in change from recall 1 to interaction 2? **No**.

```{r}
wilcox.test(subset(exp2.change.data,Condition=="Condition: 100-66")$ChangeRecall1Interaction2, 
            subset(exp2.change.data,Condition=="Condition: 100-33")$ChangeRecall1Interaction2) 
```

Q1b: do the Participants differ? **Yes**. 

```{r}
wilcox.test(subset(exp2.change.data,Participant=="P1")$ChangeRecall1Interaction2, 
            subset(exp2.change.data,Participant=="P2")$ChangeRecall1Interaction2) 
```

Q2: do the changes differ from 0?

P1 do show a marginal effect (i.e. they only marginally change during interaction). P2 show a clear change. 

```{r}
wilcox.test(subset(exp2.change.data,Participant=="P1")$ChangeRecall1Interaction2)
wilcox.test(subset(exp2.change.data,Participant=="P2")$ChangeRecall1Interaction2) 
```

### Stats for change from Recall 1 to Recall 2

Q1a: do the conditions differ in change from recall 1 to interaction 2? **No**. 

```{r}
wilcox.test(subset(exp2.change.data,Condition=="Condition: 100-66")$ChangeRecall1Recall2, 
            subset(exp2.change.data,Condition=="Condition: 100-33")$ChangeRecall1Recall2) 
```

Q1b: do the Ps differ? **Yes**. 
```{r}
wilcox.test(subset(exp2.change.data,Participant=="P1")$ChangeRecall1Recall2, 
            subset(exp2.change.data,Participant=="P2")$ChangeRecall1Recall2) 
```

Q2: does the change from recall 1 to recall 2 differ from 0? **Marginally**. 
```{r}
wilcox.test(exp2.change.data$ChangeRecall1Recall2) 
```

Q2b: since the effect of Participant was signifciant, better break this down by P. 

Effect is n.s. for P1, but significant for P2. Note that this is in the opposite direction to Exp 1 - In Exp 1 it's the low-freq participants that don't change from recall 1 to recall 2, but in Exp 2 it's the high-freq (i.e. categorical) participants. 
```{r}
wilcox.test(subset(exp2.change.data,Participant=='P1')$ChangeRecall1Recall2) 
wilcox.test(subset(exp2.change.data,Participant=='P2')$ChangeRecall1Recall2) 
```

Additional Q (from a reviewer): how about if we only look at people who produce variable output at recall 1? 

Only P2s are variable at Recall1, there are 31 such participants. **This effect is marginal** 

```{r}
variable.recall1.participants <- subset(exp2.data.by.block,Participant=='P2' & Block=='Recall 1' & ProportionMarkedSingulars>0 & ProportionMarkedSingulars<1)$ParticipantID

length(variable.recall1.participants)


wilcox.test(subset(exp2.change.data,ParticipantID %in% variable.recall1.participants)$ChangeRecall1Recall2)
```

# Plot within-pair differences and do statistics over these

We can measure alignment using within-pair difference in marker usage - lower within-pair difference is indicative of higher alignment.

## Plots showing within-pair differences

```{r}
# The easiest way to do this is to build a wide-format table by subsetting based on P then merging

p1 <- dplyr::select(subset(exp2.data.by.block,Participant=="P1"),-Participant,-ParticipantID)
p2 <- dplyr::select(subset(exp2.data.by.block,Participant=="P2"),-Participant,-ParticipantID)
exp2.diffs <- merge(p1,p2,by=c('Condition','Pair','Block','BlockNewlines'))

#calculate absolute diffs
exp2.diffs$Difference <- abs(exp2.diffs$ProportionMarkedSingulars.x-exp2.diffs$ProportionMarkedSingulars.y)

#remove unnecessary columns, reorder Block again
exp2.diffs <- dplyr::select(exp2.diffs,-ProportionMarkedSingulars.x,-ProportionMarkedSingulars.y)
```


```{r}
ggplot(data=exp2.diffs, aes(x=BlockNewlines, y=Difference, fill=Condition,ymin=0,ymax=1)) +
  theme_bw() + 
  geom_boxplot() +
  facet_grid(Condition~.) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  ylab("Within-Pair Difference") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none")
```

```{r include=FALSE}
#Plot for paper
ggplot(data=exp2.diffs, aes(x=BlockNewlines, y=Difference, fill=Condition,ymin=0,ymax=1)) +
  theme_bw() + 
  geom_boxplot() +
  facet_grid(Condition~.) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(0,1,1/3),labels=c("0","1/3","2/3","1")) +
  ylab("Within-Pair Difference") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") +  
  ggsave(file="Plots/Exp2DiffPlot.pdf",width=5, height=3)
```

## Plots showing change in within-pair differences

Also useful to show the change in within-pair differences over time.

```{r}
#The most convenient way to calculate differences from block to block is to restructure the data to wide format.
exp2.diffs.change.data <- tidyr::spread(data=dplyr::select(exp2.diffs,-BlockNewlines),
                                        Block,Difference)

exp2.diffs.change.data$ChangeTrainingRecall1 <- exp2.diffs.change.data$'Recall 1' - exp2.diffs.change.data$'Training'

exp2.diffs.change.data$ChangeRecall1Interaction2 <- exp2.diffs.change.data$'Interaction Block 2'-exp2.diffs.change.data$'Recall 1'

exp2.diffs.change.data$ChangeRecall1Recall2 <- exp2.diffs.change.data$'Recall 2'-exp2.diffs.change.data$'Recall 1'


#convert back to long format for plotting
exp2.diffs.change.data.for.plotting <- dplyr::select(exp2.diffs.change.data,-Training,-'Recall 1',-'Recall 2',-'Interaction Block 1',-'Interaction Block 2')

exp2.diffs.change.data.for.plotting <- tidyr::gather(exp2.diffs.change.data.for.plotting,
BlockToBlock,DifferenceChange,ChangeTrainingRecall1,ChangeRecall1Interaction2,ChangeRecall1Recall2)

#Make column names more user-friendly
exp2.diffs.change.data.for.plotting$BlockToBlock <- plyr::revalue(exp2.diffs.change.data.for.plotting$BlockToBlock,
                                                   c("ChangeTrainingRecall1"="Training to Recall 1",
                                                     "ChangeRecall1Interaction2"="Recall 1 to Interaction Block 2",
                                                     "ChangeRecall1Recall2"="Recall 1 to Recall 2"))

#For one plot I want the conditions seperately and combined, achieving this by duplicating the data
exp2.diffs.change.data.for.plotting.combined <- exp2.diffs.change.data.for.plotting
exp2.diffs.change.data.for.plotting.combined$Condition <- "Both\nconditions"
exp2.diffs.change.data.for.plotting.combined <- rbind(exp2.diffs.change.data.for.plotting,exp2.diffs.change.data.for.plotting.combined)

```


The stats (below) suggest a difference between conditions in the change from Recall 1 to Interaction 2, so we plot the conditions seperately.
```{r}

ggplot(data=subset(exp2.diffs.change.data.for.plotting.combined,BlockToBlock=="Recall 1 to Interaction Block 2"), aes(x=Condition, y=DifferenceChange, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  expand_limits(y=1) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change In Within-Pair Difference") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Recall 1 to Interaction Block 2") 
```

```{r include=FALSE}
#Plot for paper, including annotations
ggplot(data=subset(exp2.diffs.change.data.for.plotting.combined,BlockToBlock=="Recall 1 to Interaction Block 2"), aes(x=Condition, y=DifferenceChange, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  expand_limits(y=1) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change In Within-Pair Difference") + 
  theme(axis.title.x = element_blank()) +
  theme(legend.position="none") + 
  ggtitle("Recall 1 to Interaction Block 2") +
  annotate("text",x=1.5,y=2/3,label="***") + #add p to indicate significant diff
  geom_segment(aes(x=1, y=2/3, xend=1.4, yend=2/3)) + geom_segment(aes(x=1.6, y=2/3, xend=2, yend=2/3)) + #add lines either side of text
  annotate("text",x=1,y=1.5/6,label="**") + #add note about n.s.difference from 0
  annotate("text",x=2,y=1.5/6,label="***") + #add note about n.s.difference from 0
  annotate("text",x=3,y=1.5/6,label="***") + #add note about n.s.difference from 0
  ggsave(file="Plots/Exp2DiffChangeRecall1Interaction2.pdf",width=5, height=3)
```


For Recall 1 to Recall 2 I want to plot both conditions combined only.
```{r}
ggplot(data=subset(exp2.diffs.change.data.for.plotting.combined,BlockToBlock=="Recall 1 to Recall 2" & Condition=="Both\nconditions"), aes(x=Condition, y=DifferenceChange, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  expand_limits(y=1) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  ylab("Change In Within-Pair Difference") + 
  theme(axis.title.x = element_blank()) +
  #theme(strip.text.y = element_blank()) + 
  theme(legend.position="none",plot.title = element_text(size=12,hjust=0.5)) + 
  ggtitle("Recall 1 to Recall 2")
```

```{r include=FALSE}
#Plot for paper, no y axis text, annotation
ggplot(data=subset(exp2.diffs.change.data.for.plotting.combined,BlockToBlock=="Recall 1 to Recall 2" & Condition=="Both\nconditions"), aes(x=Condition, y=DifferenceChange, fill=Condition)) +
  theme_bw() + 
  geom_boxplot() +
  expand_limits(y=1) +
  expand_limits(y=-1) +
  scale_fill_manual(values=c(my.colours[2],my.colours[1],my.colours[3])) +
  scale_y_continuous(breaks=seq(-1,1,1/3),labels=c("-1","-2/3","-1/3","0","+1/3","+2/3","+1")) +
  theme(axis.title.x = element_blank()) +
  theme(axis.title.y = element_blank()) +
  theme(axis.ticks = element_blank(), axis.text.y = element_blank()) + 
  theme(legend.position="none",plot.title = element_text(size=12,hjust=0.5)) + 
  ggtitle("Recall 1 to Recall 2") +
  annotate("text",x=1,y=2/3,label="p=.079") + #add note about n.s.difference from 0
  ggsave(file="Plots/Exp2DiffChangeRecall1Recall2.pdf",width=5*(.24/.74), height=3)
```

## Stats for change in within-pair difference due to interaction (change from Recall 1 to interaction 2)

Q1: do the conditions differ in change from recall 1 to interaction 2? **Yes**. 

```{r}
wilcox.test(subset(exp2.diffs.change.data,Condition=="Condition: 100-66")$ChangeRecall1Interaction2, 
            subset(exp2.diffs.change.data,Condition=="Condition: 100-33")$ChangeRecall1Interaction2) 
```

Q2a: do the change from recall 1 to interaction 2 differ from 0? **Yes**. 

```{r}
wilcox.test(exp2.diffs.change.data$ChangeRecall1Interaction2) 
```

Q2b: do the same seperately, by condition.

100-66 shows the effect. 

100-33 show the effect.

```{r}
wilcox.test(subset(exp2.diffs.change.data,grepl("100-66",Condition))$ChangeRecall1Interaction2)
wilcox.test(subset(exp2.diffs.change.data,grepl("100-33",Condition))$ChangeRecall1Interaction2) 
```

## Stats for change in within-pair difference from Recall 1 to Recall 2

This is another way of measuring lasting alignment.

Q1: do the conditions differ in change in difference from recall 1 to recall 2? **No**.

```{r}
wilcox.test(subset(exp2.diffs.change.data,grepl("100-66",Condition))$ChangeRecall1Recall2, 
            subset(exp2.diffs.change.data,grepl("100-33",Condition))$ChangeRecall1Recall2) 
```

Q2: does the change from recall 1 to recall 2 differ from 0?  **Marginally** 

```{r}
wilcox.test(exp2.diffs.change.data$ChangeRecall1Recall2) 
```

